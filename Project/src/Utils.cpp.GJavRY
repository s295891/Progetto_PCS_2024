#include "Utils.hpp"
#include <iostream>
#include <fstream>
#include <sstream>
#include "Eigen/Eigen"

using namespace std;
using namespace Eigen;

namespace LibreriaFratture {
bool ImportaCoordinate(const string &filename, FrattureMesh& mesh ){


    ifstream file(filename);
    if(!file.is_open())
    {
        return false;
    }


    //cout<<"apertura corretta del file"<<endl;

    // Ignora la prima riga
    string first_line;
    getline(file, first_line);

    //Lettura del numero di fratture
    string line;
    unsigned int NumberFractures = 0;
    getline(file, line);
    NumberFractures = stoi(line); // Converti la stringa in un intero

    //cout<<"il numero di fratture: "<< NumberFractures << endl;

    // procediamo con la lettura delle matrici
    for (unsigned int i = 0; i < NumberFractures; ++i) {
        // Ignora la prima riga con # dove vengono indicate i number of fracture e i numvertices
        getline(file,first_line);

        istringstream converter(first_line);   // probabilmente qua c'è un errore
        unsigned int FractureId, numVertices;

        string token;
        if (getline(converter, token, ';'))
            FractureId = stoi(token);

        cout<<"Id fratture "<<FractureId<<endl;

        if (getline(converter, token, ';'))
            numVertices = stoi(token);
        cout<<"Numero di vertici " << numVertices << endl;



        // Ignora la riga vuota
        getline(file, first_line);

        // Allocazione della matrice per le coordinate
        MatrixXd coordinates(3, NumVertices);

        // Lettura delle coordinate
        for (unsigned int j = 0; j < NumVertices; ++j) {
            for (unsigned int k = 0; k < 3; ++k) {
                file >> coordinates(k, j); // La matrice è trasposta rispetto alla tua richiesta
                if (k < 2) {
                    file.ignore(1, ';'); // Ignora il separatore ;
                }
            }
        }


    }

    mesh.NumeroFratture = NumberFractures;

    file.close();
    return true;

}
}
